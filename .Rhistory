df <- melt(df, id.vars = colnames(df)[1:2])
ggplot(df, aes(x=V2, y =value, color = variable))+
geom_line()
fivenum(df$value)
ggplot(df, aes(x=V2, y=value, color=variable, group=variable)) +
geom_line() +
facet_wrap(~variable) +
theme_minimal()
df <- read.delim("C:/Users/ericd/Desktop/genomescope/combined_window_depth.txt", header=FALSE)
df<-df[df$V1!= CP001277.1,]
ggplot(df, aes(x=V2, y=value, color=variable, group=variable)) +
geom_line() +
facet_wrap(~variable) +
theme_minimal()
df <- read.delim("C:/Users/ericd/Desktop/genomescope/combined_window_depth.txt", header=FALSE)
df<-df[df$V1!= CP001277.1,]
df <- melt(df, id.vars = colnames(df)[1:2])
ggplot(df, aes(x=V2, y=value, color=variable, group=variable)) +
geom_line() +
facet_wrap(~variable) +
theme_minimal()
df <- read.delim("C:/Users/ericd/Desktop/genomescope/combined_window_depth.txt", header=FALSE)
View(df)
df<-df[df$V1!= CP001277.1,]
df<-df[df$V1!= "CP001277.1",]
df <- melt(df, id.vars = colnames(df)[1:2])
ggplot(df, aes(x=V2, y =value, color = variable))+
geom_line()
fivenum(df$value)
ggplot(df, aes(x=V2, y=value, color=variable, group=variable)) +
geom_line() +
facet_wrap(~variable) +
theme_minimal()
df <- read.delim("C:/Users/ericd/Desktop/genomescope/combined_window_depth.txt", header=FALSE)
View(df)
df <- read.delim("C:/Users/ericd/Desktop/genomescope/combined_window_depth.txt", header=FALSE)
df<-df[df$V1== "CP001277.1",]
df <- melt(df, id.vars = colnames(df)[1:2])
ggplot(df, aes(x=V2, y =value, color = variable))+
geom_line()
fivenum(df$value)
ggplot(df, aes(x=V2, y=value, color=variable, group=variable)) +
geom_line() +
facet_wrap(~variable) +
theme_minimal()
df <- read.delim("C:/Users/ericd/Desktop/genomescope/combined_window_depth.txt", header=FALSE)
df<-df[df$V1== "CP001277.1",]
df<-df[df$V2 <10^6,]
df <- melt(df, id.vars = colnames(df)[1:2])
ggplot(df, aes(x=V2, y=value, color=variable, group=variable)) +
geom_line() +
facet_wrap(~variable) +
theme_minimal()
df <- read.delim("C:/Users/ericd/Desktop/genomescope/combined_window_depth.txt", header=FALSE)
df<-df[df$V1== "CP001277.1",]
df<-df[df$V2 <10^6,]
df[,-c(1,2)] <- apply(df[,-c(1,2)], 2, function(x) (x - min(x)) / (max(x) - min(x)))
df <- melt(df, id.vars = colnames(df)[1:2])
ggplot(df, aes(x=V2, y=value, color=variable, group=variable)) +
geom_line() +
facet_wrap(~variable) +
theme_minimal()
ggplot(df, aes(x=V2, y=value, color=variable, group=variable)) +
geom_line() +
theme_minimal()
df <- read.delim("C:/Users/ericd/Desktop/genomescope/combined_window_depth.txt", header=FALSE)
df<-df[df$V1== "CP001277.1",]
df<-df[df$V2 <10^6,]
ggplot(df, aes(x=V2, y=value, color=variable, group=variable)) +
geom_line() +
facet_wrap(~variable) +
theme_minimal()
df <- melt(df, id.vars = colnames(df)[1:2])
ggplot(df, aes(x=V2, y=value, color=variable, group=variable)) +
geom_line() +
facet_wrap(~variable) +
theme_minimal()
#Load required packages
library(readr)
library(stringr)
library(ggplot2)
library(ggVennDiagram)
library(gridExtra)
#Load orthogroup data
Orthogroups <- read.delim2("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/Orthogroups.tsv")
################################################################################
#LSP 1 (CH14 assembly)
################################################################################
#Parameters for this genome
CONTIG <- 191
START <- 3000000
STOP <- 7001000
#Load and format input data
BED <- read.delim("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/bed_files/t2_17_3_4i_13.bed", header=FALSE)
BED <- BED[BED$V8 == "gene",]
BED$ID <- gsub("ID=","",BED$V10)
BED$ID <- gsub(";","",BED$ID)
BED$contig <- BED$V1
BED_CH14 <- BED[BED$contig == CONTIG & BED$V2 >= START & BED$V3 <= STOP, ]
#Append the orthogroup to each predicted gene
TARGET <- data.frame(gsub(" ","",Orthogroups$t2_17_3_4i_13))
TARGET <- data.frame(paste(",",TARGET$gsub..........Orthogroups.t2_17_3_4i_13.,",",sep = ""))
#Initialize a vector to store the results
BED_CH14$ORTH <- 0
#Run the function
for(i in 1:nrow(BED_CH14)){
GENE <- paste(",",BED_CH14$ID[i],",",sep = "")
BED_CH14$ORTH[i] <- Orthogroups$Orthogroup[grep(GENE,unlist(TARGET))]
}
################################################################################
#LSP 2 (CH434 assembly)
################################################################################
#Parameters for this genome
CONTIG <- 5
START <- 613227
STOP <- 4565149
#Load and format input data
BED <- read.delim("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/bed_files/CH_434-inb3-a-1.bed", header=FALSE)
BED <- BED[BED$V8 == "gene",]
BED$ID <- gsub("ID=","",BED$V10)
BED$ID <- gsub(";","",BED$ID)
BED$contig <- BED$V1
BED_CH434 <- BED[BED$contig == CONTIG & BED$V2 >= START & BED$V3 <= STOP, ]
#Append the orthogroup to each predicted gene
TARGET <- data.frame(gsub(" ","",Orthogroups$CH_434_inb3_a_1))
TARGET <- data.frame(paste(",",TARGET$gsub..........Orthogroups.CH_434_inb3_a_1.,",",sep = ""))
#Remove a few singleton genes that cause the function to return an error
BED_CH434 <- BED_CH434[BED_CH434$ID != "g5074" & BED_CH434$ID != "g5075",]
#Initialize a vector to store the results
BED_CH434$ORTH <- 0
#Run the function
for(i in 1:nrow(BED_CH434)){
GENE <- paste(",",BED_CH434$ID[i],",",sep = "")
BED_CH434$ORTH[i] <- Orthogroups$Orthogroup[grep(GENE,unlist(TARGET))]
}
################################################################################
#LSP 3 (T1 assembly)
################################################################################
#Parameters for this genome
CONTIG <- 5
START <- 613227
STOP <- 4565149
#Load and format input data
BED <- read.delim("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/bed_files/t1_10_3_2.bed", header=FALSE)
BED <- BED[BED$V8 == "gene",]
BED$ID <- gsub("ID=","",BED$V10)
BED$ID <- gsub(";","",BED$ID)
BED$contig <- BED$V1
BED_T1 <- BED[BED$contig == 35 & BED$V2 >= 400736 | BED$contig == 82,]
#Append the orthogroup to each predicted gen
TARGET <- data.frame(gsub(" ","",Orthogroups$t1_10_3_2))
TARGET <- data.frame(paste(",",TARGET$gsub..........Orthogroups.t1_10_3_2.,",",sep = ""))
#Initialize a vector to store the results
BED_T1$ORTH <- 0
#Run the function
for(i in 1:nrow(BED_T1)){
GENE <- paste(",",BED_T1$ID[i],",",sep = "")
BED_T1$ORTH[i] <- Orthogroups$Orthogroup[grep(GENE,unlist(TARGET))]
}
################################################################################
#Plot Venn diagram comparison across genomes
x <- list(BED_CH14$ORTH, BED_CH434$ORTH, BED_T1$ORTH)
p1 <- ggVennDiagram(x, c("Hap. 1","Hap. 2","Hap. 3"),label_alpha=0.7)+
scale_fill_gradient(low="gray95",high = "blue")+
theme(legend.position = c(1, 0.8))+
ggtitle("Chr. 5 left arm - control region")+
theme(plot.title = element_text(hjust = 0.5))+
labs(fill='Gene count')+scale_color_manual(values = c("black", "black", "black"))
CONTIG <- 31
START <- 1534355
STOP <- 7111581
BED <- read.delim("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/bed_files/t2_17_3_4i_13.bed", header=FALSE)
BED <- BED[BED$V8 == "gene",]
BED$ID <- gsub("ID=","",BED$V10)
BED$ID <- gsub(";","",BED$ID)
BED$contig <- BED$V1
BED_CH14 <- BED[BED$contig == CONTIG & BED$V2 >= START & BED$V3 <= STOP, ]
#This function appends the orthogroup to each predicted gene
TARGET <- data.frame(gsub(" ","",Orthogroups$t2_17_3_4i_13))
TARGET <- data.frame(paste(",",TARGET$gsub..........Orthogroups.t2_17_3_4i_13.,",",sep = ""))
BED_CH14$ORTH <- 0
for(i in 1:nrow(BED_CH14)){
GENE <- paste(",",BED_CH14$ID[i],",",sep = "")
BED_CH14$ORTH[i] <- Orthogroups$Orthogroup[grep(GENE,unlist(TARGET))]
}
################################################################################
#CH434
################################################################################
CONTIG <- 12
START <- 537051
STOP <- 3078906
BED <- read.delim("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/bed_files/CH_434-inb3-a-1.bed", header=FALSE)
BED <- BED[BED$V8 == "gene",]
BED$ID <- gsub("ID=","",BED$V10)
BED$ID <- gsub(";","",BED$ID)
BED$contig <- BED$V1
BED_CH434 <- BED[BED$contig == CONTIG & BED$V2 >= START & BED$V3 <= STOP, ]
#This function appends the orthogroup to each predicted gene
#################################################
TARGET <- data.frame(gsub(" ","",Orthogroups$CH_434_inb3_a_1))
TARGET <- data.frame(paste(",",TARGET$gsub..........Orthogroups.CH_434_inb3_a_1.,",",sep = ""))
BED_CH434 <- BED_CH434[BED_CH434$ID != "g5074" & BED_CH434$ID != "g5075",]
BED_CH434$ORTH <- 0
for(i in 1:nrow(BED_CH434)){
GENE <- paste(",",BED_CH434$ID[i],",",sep = "")
BED_CH434$ORTH[i] <- Orthogroups$Orthogroup[grep(GENE,unlist(TARGET))]
}
################################################################################
#T1
################################################################################
CONTIG <- 23
START <- 627218
STOP <- 3693875
BED <- read.delim("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/bed_files/t1_10_3_2.bed", header=FALSE)
BED <- BED[BED$V8 == "gene",]
BED$ID <- gsub("ID=","",BED$V10)
BED$ID <- gsub(";","",BED$ID)
BED$contig <- BED$V1
BED_T1 <- BED[BED$contig == CONTIG & BED$V2 >= START & BED$V3 <= STOP, ]
#This function appends the orthogroup to each predicted gene
#################################################
TARGET <- data.frame(gsub(" ","",Orthogroups$t1_10_3_2))
TARGET <- data.frame(paste(",",TARGET$gsub..........Orthogroups.t1_10_3_2.,",",sep = ""))
BED_T1 <- BED_T1[BED_T1$ID != "g4210",]
BED_T1$ORTH <- 0
for(i in 1:nrow(BED_T1)){
GENE <- paste(",",BED_T1$ID[i],",",sep = "")
BED_T1$ORTH[i] <- Orthogroups$Orthogroup[grep(GENE,unlist(TARGET))]
}
################################################################################
#Comparison across genomes
x <- list(BED_CH14$ORTH, BED_CH434$ORTH, BED_T1$ORTH)
p2 <- ggVennDiagram(x, c("Hap. 1","Hap. 2","Hap. 3"),label_alpha=0.7)+
scale_fill_gradient(low="gray95",high = "blue",limits = c(0, 400))+
theme(legend.position = c(1, 0.8))+
ggtitle("Chr. 5 right arm - HDH region")+
theme(plot.title = element_text(hjust = 0.5))+
labs(fill='Gene count')+scale_color_manual(values = c("black", "black", "black"))
View(BED)
View(x)
View(BED)
View(Orthogroups)
View(TARGET)
View(Orthogroups)
View(BED)
View(BED_CH14)
View(x)
x[1]
View(BED_T1)
View(BED_CH434)
View(Orthogroups)
View(BED_CH14)
View(BED_CH14)
################################################################################
# Get unique genes in LSP1
subset <- BED_T1[!(BED_CH14$ORTH %in% BED_CH434$ORTH),]
View(subset)
################################################################################
# Get unique genes in LSP1
subset <- BED_T1[!(BED_CH14$ORTH %in% BED_CH434$ORTH) & !(BED_CH14$ORTH %in% BED_T1$ORTH),]
View(subset)
View(BED_CH14)
################################################################################
# Get unique genes in LSP1
subset <- BED_CH14[!(BED_CH14$ORTH %in% BED_CH434$ORTH) & !(BED_CH14$ORTH %in% BED_T1$ORTH),]
################################################################################
# Get unique genes in LSP1
subset <- BED_CH14[!(BED_CH14$ORTH %in% BED_CH434$ORTH) & !(BED_CH14$ORTH %in% BED_T1$ORTH),]
subset <- BED_CH14[BED_CH14$ORTH %in% BED_CH434$ORTH & BED_CH14$ORTH %in% BED_T1$ORTH,]
View(subset)
################################################################################
# Get unique genes in LSP1
subset <- BED_CH14[!(BED_CH14$ORTH %in% BED_CH434$ORTH) & !(BED_CH14$ORTH %in% BED_T1$ORTH),]
subset <- unique(subset$ORTH)
################################################################################
# Get unique genes in LSP1
subset <- BED_CH14[!(BED_CH14$ORTH %in% BED_CH434$ORTH) & !(BED_CH14$ORTH %in% BED_T1$ORTH),]
View(subset)
t2_17_3_4i_13_functional <- read.delim("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/tsv_files/t2_17_3_4i_13_functional.tsv")
View(t2_17_3_4i_13_functional)
df2 <- read.delim("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/tsv_files/t2_17_3_4i_13_functional.tsv")
View(df2)
View(df2)
df2 <- read.delim("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/tsv_files/t2_17_3_4i_13_functional.tsv", header = TRUE)
View(df2)
df2 <- read.delim("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/tsv_files/t2_17_3_4i_13_functional.tsv", header = FALSE)
View(df2)
View(df2)
View(subset)
df2 <- df2[df2$V1 %in% subset$ID]
df2 <- df2[df2$V1 %in% subset$ID,]
View(df2)
View(BED_T1)
################################################################################
# Get unique genes in LSP1
subset <- BED_CH14[!(BED_CH14$ORTH %in% BED_CH434$ORTH) & !(BED_CH14$ORTH %in% BED_T1$ORTH),]
View(subset)
df2 <- read.delim("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/tsv_files/t2_17_3_4i_13_functional.tsv", header = FALSE)
View(df2)
df2 <- df2[df2$V1 %in% subset$ID,]
View(df2)
View(df2)
View(subset)
################################################################################
# Get unique genes in LSP1
subset <- BED_CH14[!(BED_CH14$ORTH %in% BED_CH434$ORTH) & !(BED_CH14$ORTH %in% BED_T1$ORTH),]
df2 <- read.delim("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/tsv_files/t2_17_3_4i_13_functional.tsv", header = FALSE)
df2 <- df2[df2$V1 %in% subset$ID,]
df2 <-merge(df2, subset, by.x = "V1", by.y = "ID")
View(df2)
################################################################################
# Get unique genes in LSP1
privateBED <- BED_CH14[!(BED_CH14$ORTH %in% BED_CH434$ORTH) & !(BED_CH14$ORTH %in% BED_T1$ORTH),]
################################################################################
# Get unique genes in LSP1
privateBED <- BED_CH14[!(BED_CH14$ORTH %in% BED_CH434$ORTH) & !(BED_CH14$ORTH %in% BED_T1$ORTH),]
geneList <- read.delim("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/tsv_files/t2_17_3_4i_13_functional.tsv", header = FALSE)
geneList <- geneList[geneList$V1 %in% privateBED$ID,]
geneList <-merge(geneList, privateBED, by.x = "V1", by.y = "ID")
View(geneList)
contig <- geneList$V1.y
contig <- geneList$V1.y
startPos <- geneList$V2.y
stopPos <- geneList$V3.y
geneList <- data.frame(geneList()
startPos <- geneList$V2.y
stopPos <- geneList$V3.y
model <- geneList$V4.x
hitName <- geneList$V6.x
hitDesc <- geneList$V13
result <- data.frame(contig,startPos,stopPos,model,hitName,hitDesc)
View(result)
result <- data.frame(contig,startPos,stopPos,model,hitName)
contig <- geneList$V1.y
startPos <- geneList$V2.y
stopPos <- geneList$V3.y
model <- geneList$V4.x
hitName <- geneList$V6.x
hitName2 <- geneList$V13
result <- data.frame(contig,startPos,stopPos,model,hitName)
result2 <- result[grepl("fuc",result$hitName),]
View(result2)
contig <- geneList$V1.y
startPos <- geneList$V2.y
stopPos <- geneList$V3.y
model <- geneList$V4.x
hitName <- geneList$V6.x
result <- data.frame(contig,startPos,stopPos,model,hitName)
View(result)
result2 <- result[grepl("fuc",result$hitName, ignore.case = TRUE),]
View(result2)
################################################################################
# Get unique genes in LSP1
privateBED <- BED_CH14[!(BED_CH14$ORTH %in% BED_CH434$ORTH) & !(BED_CH14$ORTH %in% BED_T1$ORTH),]
View(privateBED)
geneList <- read.delim("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/tsv_files/t2_17_3_4i_13_functional.tsv", header = FALSE)
geneList <- geneList[geneList$V1 %in% privateBED$ID,]
geneList <-merge(geneList, privateBED, by.x = "V1", by.y = "ID")
contig <- geneList$V1.y
startPos <- geneList$V2.y
stopPos <- geneList$V3.y
model <- geneList$V4.x
hitName <- geneList$V6.x
result <- data.frame(contig,startPos,stopPos,model,hitName)
View(result2)
View(result)
View(result)
################################################################################
# Get unique genes in LSP1
privateBED <- BED_CH14[!(BED_CH14$ORTH %in% BED_CH434$ORTH) & !(BED_CH14$ORTH %in% BED_T1$ORTH),]
geneList <- read.delim("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/tsv_files/t2_17_3_4i_13_functional.tsv", header = FALSE)
geneList <- geneList[geneList$V1 %in% privateBED$ID,]
geneList <-merge(geneList, privateBED, by.x = "V1", by.y = "ID")
contig <- geneList$V1.y
startPos <- geneList$V2.y
stopPos <- geneList$V3.y
model <- geneList$V4.x
hitName <- geneList$V6.x
result <- data.frame(contig,startPos,stopPos,model,hitName)
result2 <- result[grepl("fuc",result$hitName, ignore.case = TRUE),]
View(result2)
View(geneList)
geneID <- geneList$V1
result <- data.frame(geneID,contig,startPos,stopPos,model,hitName)
result2 <- result[grepl("fuc",result$hitName, ignore.case = TRUE),]
View(result2)
#####
privateBED <- BED_CH434[!(BED_CH434$ORTH %in% BED_CH14$ORTH) & !(BED_CH14$ORTH %in% BED_T1$ORTH),]
#####
privateBED <- BED_CH434[!(BED_CH434$ORTH %in% BED_CH14$ORTH) & !(BED_CH434$ORTH %in% BED_T1$ORTH),]
View(privateBED)
#####
privateBED <- BED_CH434[!(BED_CH434$ORTH %in% BED_CH14$ORTH) & !(BED_CH434$ORTH %in% BED_T1$ORTH),]
geneList <- read.delim("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/tsv_files/CH_434-inb3-a-1_functional.tsv", header = FALSE)
geneList <- geneList[geneList$V1 %in% privateBED$ID,]
geneList <-merge(geneList, privateBED, by.x = "V1", by.y = "ID")
contig <- geneList$V1.y
startPos <- geneList$V2.y
stopPos <- geneList$V3.y
model <- geneList$V4.x
hitName <- geneList$V6.x
geneID <- geneList$V1
result <- data.frame(geneID,contig,startPos,stopPos,model,hitName)
View(result)
#####
privateBED <- BED_T1[!(BED_T1$ORTH %in% BED_CH14$ORTH) & !(BED_T1$ORTH %in% BED_CH434$ORTH),]
#####
privateBED <- BED_T1[!(BED_T1$ORTH %in% BED_CH14$ORTH) & !(BED_T1$ORTH %in% BED_CH434$ORTH),]
geneList <- read.delim("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/tsv_files/t3_12_3_1i_12_functional.tsv", header = FALSE)
geneList <- geneList[geneList$V1 %in% privateBED$ID,]
geneList <-merge(geneList, privateBED, by.x = "V1", by.y = "ID")
contig <- geneList$V1.y
startPos <- geneList$V2.y
stopPos <- geneList$V3.y
model <- geneList$V4.x
hitName <- geneList$V6.x
geneID <- geneList$V1
result <- data.frame(geneID,contig,startPos,stopPos,model,hitName)
View(result)
################################################################################
# Get unique genes in LSP1
privateBED <- BED_CH14[!(BED_CH14$ORTH %in% BED_CH434$ORTH) & !(BED_CH14$ORTH %in% BED_T1$ORTH),]
geneList <- read.delim("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/tsv_files/t2_17_3_4i_13_functional.tsv", header = FALSE)
geneList <- geneList[geneList$V1 %in% privateBED$ID,]
geneList <-merge(geneList, privateBED, by.x = "V1", by.y = "ID")
contig <- geneList$V1.y
startPos <- geneList$V2.y
stopPos <- geneList$V3.y
model <- geneList$V4.x
hitName <- geneList$V6.x
geneID <- geneList$V1
result <- data.frame(geneID,contig,startPos,stopPos,model,hitName)
result2 <- result[grepl("fuc",result$hitName, ignore.case = TRUE),]
################################################################################
# Get unique genes in LSP1
privateBED <- BED_CH14[!(BED_CH14$ORTH %in% BED_CH434$ORTH) & !(BED_CH14$ORTH %in% BED_T1$ORTH),]
geneList <- read.delim("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/tsv_files/t2_17_3_4i_13_functional.tsv", header = FALSE)
geneList <- geneList[geneList$V1 %in% privateBED$ID,]
geneList <-merge(geneList, privateBED, by.x = "V1", by.y = "ID")
contig <- geneList$V1.y
startPos <- geneList$V2.y
stopPos <- geneList$V3.y
model <- geneList$V4.x
hitName <- geneList$V6.x
geneID <- geneList$V1
result <- data.frame(geneID,contig,startPos,stopPos,model,hitName)
result2 <- result[grepl("fuc",result$hitName, ignore.case = TRUE),]
write.csv(result, file = "C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/CH14_private.csv")
write.csv(result2, file = "C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/CH14_private_fucosyl.csv")
geneList <- read.delim("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/tsv_files/t2_17_3_4i_13_functional.tsv", header = FALSE)
View(geneList)
################################################################################
# Get unique genes in LSP1
privateBED <- BED_CH14[!(BED_CH14$ORTH %in% BED_CH434$ORTH) & !(BED_CH14$ORTH %in% BED_T1$ORTH),]
geneList <- read.delim("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/tsv_files/t2_17_3_4i_13_functional.tsv", header = FALSE)
# Get unique genes in LSP1
privateBED <- BED_CH14[!(BED_CH14$ORTH %in% BED_CH434$ORTH) & !(BED_CH14$ORTH %in% BED_T1$ORTH),]
geneList <- read.delim("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/tsv_files/t2_17_3_4i_13_functional.tsv", header = FALSE)
geneList <- geneList[geneList$V1 %in% privateBED$ID,]
geneList <-merge(geneList, privateBED, by.x = "V1", by.y = "ID")
contig <- geneList$V1.y
startPos <- geneList$V2.y
stopPos <- geneList$V3.y
model <- geneList$V4.x
hitName <- geneList$V6.x
geneID <- geneList$V1
result <- data.frame(geneID,contig,startPos,stopPos,model,hitName)
result2 <- result[grepl("fuc",result$hitName, ignore.case = TRUE),]
write.csv(result, file = "C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/CH14_private.csv")
write.csv(result2, file = "C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/CH14_private_fucosyl.csv")
#####
privateBED <- BED_CH434[!(BED_CH434$ORTH %in% BED_CH14$ORTH) & !(BED_CH434$ORTH %in% BED_T1$ORTH),]
geneList <- read.delim("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/tsv_files/CH_434-inb3-a-1_functional.tsv", header = FALSE)
geneList <- geneList[geneList$V1 %in% privateBED$ID,]
geneList <-merge(geneList, privateBED, by.x = "V1", by.y = "ID")
contig <- geneList$V1.y
startPos <- geneList$V2.y
stopPos <- geneList$V3.y
model <- geneList$V4.x
hitName <- geneList$V6.x
geneID <- geneList$V1
result <- data.frame(geneID,contig,startPos,stopPos,model,hitName)
result2 <- result[grepl("fuc",result$hitName, ignore.case = TRUE),]
write.csv(result, file = "C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/CH434_private.csv")
#####
privateBED <- BED_T1[!(BED_T1$ORTH %in% BED_CH14$ORTH) & !(BED_T1$ORTH %in% BED_CH434$ORTH),]
geneList <- read.delim("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/tsv_files/t3_12_3_1i_12_functional.tsv", header = FALSE)
geneList <- geneList[geneList$V1 %in% privateBED$ID,]
geneList <-merge(geneList, privateBED, by.x = "V1", by.y = "ID")
contig <- geneList$V1.y
startPos <- geneList$V2.y
stopPos <- geneList$V3.y
model <- geneList$V4.x
hitName <- geneList$V6.x
geneID <- geneList$V1
result <- data.frame(geneID,contig,startPos,stopPos,model,hitName)
result2 <- result[grepl("fuc",result$hitName, ignore.case = TRUE),]
write.csv(result, file = "C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/T1_private.csv")
#####
privateBED <- BED_CH434[]
geneList <- read.delim("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/gene_prediction/tsv_files/CH_434-inb3-a-1_functional.tsv", header = FALSE)
geneList <- geneList[geneList$V1 %in% privateBED$ID,]
geneList <-merge(geneList, privateBED, by.x = "V1", by.y = "ID")
contig <- geneList$V1.y
startPos <- geneList$V2.y
stopPos <- geneList$V3.y
model <- geneList$V4.x
hitName <- geneList$V6.x
geneID <- geneList$V1
result <- data.frame(geneID,contig,startPos,stopPos,model,hitName)
result2 <- result[grepl("fuc",result$hitName, ignore.case = TRUE),]
View(result2)
