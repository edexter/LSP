setwd("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/dotplots/dgenies_output")
# List all dotplots stored in the folder
# Get all files and folders in the current working directory
folders <- list.files(getwd())
# Filter to keep only folders
folders <- folders[file.info(folders)$isdir]
################################################################################
# Function to read the input files and produce a plot for each alignment
################################################################################
generateSubplots <- function(numPlots,x_labels,y_labels,plot_titles,
contigLineColor,contigLineSize) {
# Initialize an empty list to store all of the sub-plots
plotList <- list()
# Iterate over all alignments in target folder
for (i in 1:length(numPlots)) {
# Import alignment file and simplify contig names
folderName <- paste(folders[i],"/map.paf", sep="")
appendNewlineIfNeeded(folderName)
ali <- read_paf(folderName)
ali$qname <- sub("^0+", "", gsub("[^0-9]+", "", ali$qname))
ali$tname <- sub("^0+", "", gsub("[^0-9]+", "", ali$tname))
# Filter secondary, short, and poor quality alignments
ali <- filter_secondary_alignments(ali)
ali <- subset(ali, alen > 2e4 & mapq > 40)
# Import contig order and simplify contig names
targetOrderName <- paste(folders[i],"/target.idx", sep="")
targetOrder <- read.table(targetOrderName)
targetOrder <- row.names(targetOrder)
targetOrder <- sub("^0+", "", gsub("[^0-9]+", "", targetOrder))
# Import contig order and simplify contig names
queryOrderName <- paste(folders[i],"/query.idx", sep="")
queryOrder <- read.table(queryOrderName)
queryOrder <- row.names(queryOrder)
queryOrder <- sub("^0+", "", gsub("[^0-9]+", "", queryOrder))
# Save list of contig orders to pass to plot function
contigOrder <- list(queryOrder,targetOrder)
plotList[[i]] <- customPlotFun(ali, order_by="provided", ordering=contigOrder, label_seqs=FALSE,
alignment_colour = "black", contigLineColor=contigLineColor,
contigLineSize=contigLineSize) +
theme_bw() +
coord_cartesian()+
xlab(x_labels[i]) +
ylab(y_labels[i]) +
ggtitle(plot_titles[i]) +
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank())+
theme(plot.title = element_text(hjust = 0.5))+
theme(plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "cm"))
}
# Return the list of plots
return(plotList)
}
################################################################################
# Apply to the function to the desired folder and plot the output
################################################################################
x_labels <- c("LSP1","LSP1","LSP1",
"LSP2","LSP2","LSP2",
"LSP3","LSP3","LSP3")
y_labels <- c("LSP1","LSP2","LSP3",
"LSP1","LSP2","LSP3",
"LSP1","LSP2","LSP3")
plot_titles <- c("Haplotype 1 vs 1","Haplotype 1 vs 2"," Haplotype 1 vs 3",
"Haplotype 2 vs 1","Haplotype 2 vs 2","Haplotype 2 vs 3",
"Haplotype 3 vs 1","Haplotype 3 vs 2","Haplotype 3 vs 3")
x_labels <- ""
y_labels <- ""
################################################################################
# Create a list of labels for all the plots
################################################################################
results <- generateSubplots(folders, x_labels, y_labels, plot_titles,
contigLineColor = "gray", contigLineSize = 0.5)
# Combine the plots into a 3x3 grid
grid_plot <- do.call(grid.arrange, c(results, ncol=3, nrow=3))
# Save the combined plot
ggsave("C:/Users/ericd/Downloads/LD_chr5_rankB.png", plot = grid_plot, width = 7, height = 7, dpi = 900)
# This R script makes a matrix of genome alignment dotplots using the data
# that is output from the D-genies software. Script written by Eric Dexter.
################################################################################
# Load required packages
################################################################################
library(pafr) # For reading and manipulating the alignments
library(gridExtra) # For plotting as a grid
################################################################################
# Get list of files to be analyzed
################################################################################
# Navigate to working directory where D-genies output is stored
setwd("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/dotplots/dgenies_output")
# List all dotplots stored in the folder
# Get all files and folders in the current working directory
folders <- list.files(getwd())
# Filter to keep only folders
folders <- folders[file.info(folders)$isdir]
################################################################################
# Function to read the input files and produce a plot for each alignment
################################################################################
generateSubplots <- function(numPlots,x_labels,y_labels,plot_titles,
contigLineColor,contigLineSize) {
# Initialize an empty list to store all of the sub-plots
plotList <- list()
# Iterate over all alignments in target folder
for (i in 1:length(numPlots)) {
# Import alignment file and simplify contig names
folderName <- paste(folders[i],"/map.paf", sep="")
appendNewlineIfNeeded(folderName)
ali <- read_paf(folderName)
ali$qname <- sub("^0+", "", gsub("[^0-9]+", "", ali$qname))
ali$tname <- sub("^0+", "", gsub("[^0-9]+", "", ali$tname))
# Filter secondary, short, and poor quality alignments
ali <- filter_secondary_alignments(ali)
ali <- subset(ali, alen > 2e4 & mapq > 40)
# Import contig order and simplify contig names
targetOrderName <- paste(folders[i],"/target.idx", sep="")
targetOrder <- read.table(targetOrderName)
targetOrder <- row.names(targetOrder)
targetOrder <- sub("^0+", "", gsub("[^0-9]+", "", targetOrder))
# Import contig order and simplify contig names
queryOrderName <- paste(folders[i],"/query.idx", sep="")
queryOrder <- read.table(queryOrderName)
queryOrder <- row.names(queryOrder)
queryOrder <- sub("^0+", "", gsub("[^0-9]+", "", queryOrder))
# Save list of contig orders to pass to plot function
contigOrder <- list(queryOrder,targetOrder)
plotList[[i]] <- customPlotFun(ali, order_by="provided", ordering=contigOrder, label_seqs=FALSE,
alignment_colour = "black", contigLineColor=contigLineColor,
contigLineSize=contigLineSize) +
theme_bw() +
coord_cartesian()+
xlab(x_labels[i]) +
ylab(y_labels[i]) +
ggtitle(plot_titles[i]) +
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank())+
theme(plot.title = element_text(hjust = 0.5))+
theme(plot.margin = unit(c(0.0, 0.0, 0.0, 0.0), "cm"))
}
# Return the list of plots
return(plotList)
}
################################################################################
# Apply to the function to the desired folder and plot the output
################################################################################
x_labels <- c("LSP1","LSP1","LSP1",
"LSP2","LSP2","LSP2",
"LSP3","LSP3","LSP3")
y_labels <- c("LSP1","LSP2","LSP3",
"LSP1","LSP2","LSP3",
"LSP1","LSP2","LSP3")
plot_titles <- c("Haplotype 1 vs 1","Haplotype 1 vs 2"," Haplotype 1 vs 3",
"Haplotype 2 vs 1","Haplotype 2 vs 2","Haplotype 2 vs 3",
"Haplotype 3 vs 1","Haplotype 3 vs 2","Haplotype 3 vs 3")
x_labels <- ""
y_labels <- ""
################################################################################
# Create a list of labels for all the plots
################################################################################
results <- generateSubplots(folders, x_labels, y_labels, plot_titles,
contigLineColor = "gray", contigLineSize = 0.5)
# Combine the plots into a 3x3 grid
grid_plot <- do.call(grid.arrange, c(results, ncol=3, nrow=3))
# Save the combined plot
ggsave("C:/Users/ericd/Downloads/LD_chr5_rankB.png", plot = grid_plot, width = 7, height = 7, dpi = 900)
# This R script makes a matrix of genome alignment dotplots using the data
# that is output from the D-genies software. Script written by Eric Dexter.
################################################################################
# Load required packages
################################################################################
library(pafr) # For reading and manipulating the alignments
library(gridExtra) # For plotting as a grid
################################################################################
# Get list of files to be analyzed
################################################################################
# Navigate to working directory where D-genies output is stored
setwd("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/dotplots/dgenies_output")
# List all dotplots stored in the folder
# Get all files and folders in the current working directory
folders <- list.files(getwd())
# Filter to keep only folders
folders <- folders[file.info(folders)$isdir]
################################################################################
# Function to read the input files and produce a plot for each alignment
################################################################################
generateSubplots <- function(numPlots,x_labels,y_labels,plot_titles,
contigLineColor,contigLineSize) {
# Initialize an empty list to store all of the sub-plots
plotList <- list()
# Iterate over all alignments in target folder
for (i in 1:length(numPlots)) {
# Import alignment file and simplify contig names
folderName <- paste(folders[i],"/map.paf", sep="")
appendNewlineIfNeeded(folderName)
ali <- read_paf(folderName)
ali$qname <- sub("^0+", "", gsub("[^0-9]+", "", ali$qname))
ali$tname <- sub("^0+", "", gsub("[^0-9]+", "", ali$tname))
# Filter secondary, short, and poor quality alignments
ali <- filter_secondary_alignments(ali)
ali <- subset(ali, alen > 2e4 & mapq > 40)
# Import contig order and simplify contig names
targetOrderName <- paste(folders[i],"/target.idx", sep="")
targetOrder <- read.table(targetOrderName)
targetOrder <- row.names(targetOrder)
targetOrder <- sub("^0+", "", gsub("[^0-9]+", "", targetOrder))
# Import contig order and simplify contig names
queryOrderName <- paste(folders[i],"/query.idx", sep="")
queryOrder <- read.table(queryOrderName)
queryOrder <- row.names(queryOrder)
queryOrder <- sub("^0+", "", gsub("[^0-9]+", "", queryOrder))
# Save list of contig orders to pass to plot function
contigOrder <- list(queryOrder,targetOrder)
plotList[[i]] <- customPlotFun(ali, order_by="provided", ordering=contigOrder, label_seqs=FALSE,
alignment_colour = "black", contigLineColor=contigLineColor,
contigLineSize=contigLineSize) +
theme_bw() +
coord_cartesian()+
xlab(x_labels[i]) +
ylab(y_labels[i]) +
ggtitle(plot_titles[i]) +
theme(panel.grid.major=element_blank(),
panel.grid.minor=element_blank())+
theme(plot.title = element_text(hjust = 0.5))+
theme(plot.margin = unit(c(0.1, 0.1, 0.1, 0.1), "cm"))
}
# Return the list of plots
return(plotList)
}
################################################################################
# Apply to the function to the desired folder and plot the output
################################################################################
x_labels <- c("LSP1","LSP1","LSP1",
"LSP2","LSP2","LSP2",
"LSP3","LSP3","LSP3")
y_labels <- c("LSP1","LSP2","LSP3",
"LSP1","LSP2","LSP3",
"LSP1","LSP2","LSP3")
plot_titles <- c("Haplotype 1 vs 1","Haplotype 1 vs 2"," Haplotype 1 vs 3",
"Haplotype 2 vs 1","Haplotype 2 vs 2","Haplotype 2 vs 3",
"Haplotype 3 vs 1","Haplotype 3 vs 2","Haplotype 3 vs 3")
x_labels <- ""
y_labels <- ""
################################################################################
# Create a list of labels for all the plots
################################################################################
results <- generateSubplots(folders, x_labels, y_labels, plot_titles,
contigLineColor = "gray", contigLineSize = 0.5)
# Combine the plots into a 3x3 grid
grid_plot <- do.call(grid.arrange, c(results, ncol=3, nrow=3))
# Save the combined plot
ggsave("C:/Users/ericd/Downloads/LD_chr5_rankB.png", plot = grid_plot, width = 7, height = 7, dpi = 900)
# Navigate to working directory where D-genies output is stored
setwd("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/dotplots/dgenies_output")
# List all dotplots stored in the folder
# Get all files and folders in the current working directory
folders <- list.files(getwd())
# Filter to keep only folders
folders <- folders[file.info(folders)$isdir]
folders
ali <- read_paf(folders[6])
ali <- read_paf("6_T1_CH434")
# Navigate to working directory where D-genies output is stored
setwd("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/dotplots/dgenies_output")
ali <- read_paf("/6_T1_CH434")
# Navigate to working directory where D-genies output is stored
setwd("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/dotplots/dgenies_output")
ali <- read_paf("/6_T1_CH434")
ali <- read_paf("/6_T1_CH434/map.paf")
# Navigate to working directory where D-genies output is stored
setwd("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/dotplots/dgenies_output/6_T1_CH434")
# Navigate to working directory where D-genies output is stored
setwd("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/dotplots/dgenies_output/6_T1_CH434")
ali <- read_paf("map.paf")
View(ali)
prim_alignment <- filter_secondary_alignments(ali)
dotplot(prim_alignment, label_seqs=TRUE, order_by="qstart") + theme_bw()
ali <- read_paf("map.paf")
ali$qname <- sub("^0+", "", gsub("[^0-9]+", "", ali$qname))
ali$tname <- sub("^0+", "", gsub("[^0-9]+", "", ali$tname))
prim_alignment <- filter_secondary_alignments(ali)
queryOrder <- read.table(query.idx)
queryOrder <- read.table("query.idx")
# Import contig order and simplify contig names
queryOrder <- read.table("query.idx")
queryOrder <- row.names(queryOrder)
# Import contig order and simplify contig names
targetOrder <- read.table("target.idx")
targetOrder <- row.names(targetOrder)
targetOrder <- sub("^0+", "", gsub("[^0-9]+", "", targetOrder))
# Navigate to working directory where D-genies output is stored
setwd("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/dotplots/dgenies_output/6_T1_CH434")
# List all dotplots stored in the folder
# Get all files and folders in the current working directory
folders <- list.files(getwd())
# Filter to keep only folders
folders <- folders[file.info(folders)$isdir]
folders
ali <- read_paf("map.paf")
ali$qname <- sub("^0+", "", gsub("[^0-9]+", "", ali$qname))
ali$tname <- sub("^0+", "", gsub("[^0-9]+", "", ali$tname))
prim_alignment <- filter_secondary_alignments(ali)
# Import contig order and simplify contig names
queryOrder <- read.table("query.idx")
queryOrder <- row.names(queryOrder)
queryOrder <- sub("^0+", "", gsub("[^0-9]+", "", queryOrder))
# Import contig order and simplify contig names
targetOrder <- read.table("target.idx")
targetOrder <- row.names(targetOrder)
targetOrder <- sub("^0+", "", gsub("[^0-9]+", "", targetOrder))
# Import contig order and simplify contig names
queryOrderName <- paste(folders[i],"/query.idx", sep="")
queryOrder <- read.table(queryOrderName)
queryOrder <- row.names(queryOrder)
# Save list of contig orders to pass to plot function
contigOrder <- list(queryOrder,targetOrder)
dotplot(prim_alignment, label_seqs=TRUE, order_by="provided", ordering=contigOrder) + theme_bw()
# Navigate to working directory where D-genies output is stored
setwd("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/dotplots/dgenies_output/6_T1_CH434")
# List all dotplots stored in the folder
# Get all files and folders in the current working directory
folders <- list.files(getwd())
# Filter to keep only folders
folders <- folders[file.info(folders)$isdir]
folders
ali <- read_paf("map.paf")
ali$qname <- sub("^0+", "", gsub("[^0-9]+", "", ali$qname))
ali$tname <- sub("^0+", "", gsub("[^0-9]+", "", ali$tname))
prim_alignment <- filter_secondary_alignments(ali)
# Import contig order and simplify contig names
queryOrder <- read.table("query.idx")
queryOrder <- row.names(queryOrder)
queryOrder <- sub("^0+", "", gsub("[^0-9]+", "", queryOrder))
# Import contig order and simplify contig names
targetOrder <- read.table("target.idx")
targetOrder <- row.names(targetOrder)
targetOrder <- sub("^0+", "", gsub("[^0-9]+", "", targetOrder))
# Import contig order and simplify contig names
queryOrderName <- paste(folders[i],"/query.idx", sep="")
queryOrder <- read.table(queryOrderName)
queryOrder <- row.names(queryOrder)
# Save list of contig orders to pass to plot function
contigOrder <- list(queryOrder,targetOrder)
dotplot(prim_alignment, label_seqs=TRUE, order_by="provided", ordering=contigOrder) + theme_bw()
# Import contig order and simplify contig names
queryOrderName <- paste(folders[i],"query.idx", sep="")
# Navigate to working directory where D-genies output is stored
setwd("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/dotplots/dgenies_output/6_T1_CH434")
# List all dotplots stored in the folder
# Get all files and folders in the current working directory
folders <- list.files(getwd())
# Filter to keep only folders
folders <- folders[file.info(folders)$isdir]
folders
ali <- read_paf("map.paf")
ali$qname <- sub("^0+", "", gsub("[^0-9]+", "", ali$qname))
ali$tname <- sub("^0+", "", gsub("[^0-9]+", "", ali$tname))
prim_alignment <- filter_secondary_alignments(ali)
# Import contig order and simplify contig names
queryOrder <- read.table("query.idx")
queryOrder <- row.names(queryOrder)
queryOrder <- sub("^0+", "", gsub("[^0-9]+", "", queryOrder))
# Import contig order and simplify contig names
targetOrder <- read.table("target.idx")
targetOrder <- row.names(targetOrder)
targetOrder <- sub("^0+", "", gsub("[^0-9]+", "", targetOrder))
# Save list of contig orders to pass to plot function
contigOrder <- list(queryOrder,targetOrder)
dotplot(prim_alignment, label_seqs=TRUE, order_by="provided", ordering=contigOrder) + theme_bw()
ali <- subset(ali, alen > 1e4 & mapq > 40)
# Navigate to working directory where D-genies output is stored
setwd("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/dotplots/dgenies_output/6_T1_CH434")
# List all dotplots stored in the folder
# Get all files and folders in the current working directory
folders <- list.files(getwd())
# Filter to keep only folders
folders <- folders[file.info(folders)$isdir]
folders
ali <- read_paf("map.paf")
ali$qname <- sub("^0+", "", gsub("[^0-9]+", "", ali$qname))
ali$tname <- sub("^0+", "", gsub("[^0-9]+", "", ali$tname))
ali <- filter_secondary_alignments(ali)
ali <- subset(ali, alen > 1e4 & mapq > 40)
# Import contig order and simplify contig names
queryOrder <- read.table("query.idx")
queryOrder <- row.names(queryOrder)
queryOrder <- sub("^0+", "", gsub("[^0-9]+", "", queryOrder))
# Import contig order and simplify contig names
targetOrder <- read.table("target.idx")
targetOrder <- row.names(targetOrder)
targetOrder <- sub("^0+", "", gsub("[^0-9]+", "", targetOrder))
# Save list of contig orders to pass to plot function
contigOrder <- list(queryOrder,targetOrder)
dotplot(prim_alignment, label_seqs=TRUE, order_by="provided", ordering=contigOrder) + theme_bw()
# Navigate to working directory where D-genies output is stored
setwd("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/dotplots/dgenies_output/6_T1_CH434")
# List all dotplots stored in the folder
# Get all files and folders in the current working directory
folders <- list.files(getwd())
# Filter to keep only folders
folders <- folders[file.info(folders)$isdir]
folders
ali <- read_paf("map.paf")
ali$qname <- sub("^0+", "", gsub("[^0-9]+", "", ali$qname))
ali$tname <- sub("^0+", "", gsub("[^0-9]+", "", ali$tname))
ali <- filter_secondary_alignments(ali)
ali <- subset(ali, alen > 1e4 & mapq > 40)
# Import contig order and simplify contig names
queryOrder <- read.table("query.idx")
queryOrder <- row.names(queryOrder)
queryOrder <- sub("^0+", "", gsub("[^0-9]+", "", queryOrder))
# Import contig order and simplify contig names
targetOrder <- read.table("target.idx")
targetOrder <- row.names(targetOrder)
targetOrder <- sub("^0+", "", gsub("[^0-9]+", "", targetOrder))
# Save list of contig orders to pass to plot function
contigOrder <- list(queryOrder,targetOrder)
dotplot(ali, label_seqs=TRUE, order_by="provided", ordering=contigOrder) + theme_bw()
ali <- read_paf("map.paf")
ali$qname <- sub("^0+", "", gsub("[^0-9]+", "", ali$qname))
ali$tname <- sub("^0+", "", gsub("[^0-9]+", "", ali$tname))
ali <- filter_secondary_alignments(ali)
ali <- subset(ali, alen > 100 & mapq > 40)
# Import contig order and simplify contig names
queryOrder <- read.table("query.idx")
queryOrder <- row.names(queryOrder)
queryOrder <- sub("^0+", "", gsub("[^0-9]+", "", queryOrder))
# Import contig order and simplify contig names
targetOrder <- read.table("target.idx")
targetOrder <- row.names(targetOrder)
targetOrder <- sub("^0+", "", gsub("[^0-9]+", "", targetOrder))
# Save list of contig orders to pass to plot function
contigOrder <- list(queryOrder,targetOrder)
dotplot(ali, label_seqs=TRUE, order_by="provided", ordering=contigOrder) + theme_bw()
contigOrder <- list(12,23)
dotplot(ali, label_seqs=TRUE, order_by="provided", ordering=contigOrder) + theme_bw()
contigOrder <- list(23,12)
dotplot(ali, label_seqs=TRUE, order_by="provided", ordering=contigOrder) + theme_bw()
# Navigate to working directory where D-genies output is stored
setwd("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/dotplots/dgenies_output/6_T1_CH434")
# List all dotplots stored in the folder
# Get all files and folders in the current working directory
folders <- list.files(getwd())
# Filter to keep only folders
folders <- folders[file.info(folders)$isdir]
folders
ali <- read_paf("map.paf")
ali$qname <- sub("^0+", "", gsub("[^0-9]+", "", ali$qname))
ali$tname <- sub("^0+", "", gsub("[^0-9]+", "", ali$tname))
ali <- filter_secondary_alignments(ali)
ali <- subset(ali, alen > 100 & mapq > 40)
# Import contig order and simplify contig names
queryOrder <- read.table("query.idx")
queryOrder <- row.names(queryOrder)
queryOrder <- sub("^0+", "", gsub("[^0-9]+", "", queryOrder))
# Import contig order and simplify contig names
targetOrder <- read.table("target.idx")
targetOrder <- row.names(targetOrder)
targetOrder <- sub("^0+", "", gsub("[^0-9]+", "", targetOrder))
# Save list of contig orders to pass to plot function
contigOrder <- list(queryOrder,targetOrder)
contigOrder <- list(23,12)
dotplot(ali, label_seqs=TRUE, order_by="provided", ordering=contigOrder) + theme_bw()
# Navigate to working directory where D-genies output is stored
setwd("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/dotplots/dgenies_output/6_T1_CH434")
# List all dotplots stored in the folder
# Get all files and folders in the current working directory
folders <- list.files(getwd())
# Filter to keep only folders
folders <- folders[file.info(folders)$isdir]
folders
ali <- read_paf("map.paf")
ali$qname <- sub("^0+", "", gsub("[^0-9]+", "", ali$qname))
ali$tname <- sub("^0+", "", gsub("[^0-9]+", "", ali$tname))
ali <- filter_secondary_alignments(ali)
ali <- subset(ali, alen > 1000 & mapq > 40)
# Import contig order and simplify contig names
queryOrder <- read.table("query.idx")
queryOrder <- row.names(queryOrder)
queryOrder <- sub("^0+", "", gsub("[^0-9]+", "", queryOrder))
# Import contig order and simplify contig names
targetOrder <- read.table("target.idx")
targetOrder <- row.names(targetOrder)
targetOrder <- sub("^0+", "", gsub("[^0-9]+", "", targetOrder))
# Save list of contig orders to pass to plot function
contigOrder <- list(queryOrder,targetOrder)
contigOrder <- list(23,12)
dotplot(ali, label_seqs=TRUE, order_by="provided", ordering=contigOrder) + theme_bw()
# Navigate to working directory where D-genies output is stored
setwd("C:/Users/ericd/Dropbox/Eric Work/Ebert lab/LSP/dotplots/dgenies_output/6_T1_CH434")
# List all dotplots stored in the folder
# Get all files and folders in the current working directory
folders <- list.files(getwd())
# Filter to keep only folders
folders <- folders[file.info(folders)$isdir]
folders
ali <- read_paf("map.paf")
ali$qname <- sub("^0+", "", gsub("[^0-9]+", "", ali$qname))
ali$tname <- sub("^0+", "", gsub("[^0-9]+", "", ali$tname))
ali <- filter_secondary_alignments(ali)
ali <- subset(ali, alen > 1000 & mapq > 50)
# Import contig order and simplify contig names
queryOrder <- read.table("query.idx")
queryOrder <- row.names(queryOrder)
queryOrder <- sub("^0+", "", gsub("[^0-9]+", "", queryOrder))
# Import contig order and simplify contig names
targetOrder <- read.table("target.idx")
targetOrder <- row.names(targetOrder)
targetOrder <- sub("^0+", "", gsub("[^0-9]+", "", targetOrder))
# Save list of contig orders to pass to plot function
contigOrder <- list(queryOrder,targetOrder)
contigOrder <- list(23,12)
dotplot(ali, label_seqs=TRUE, order_by="provided", ordering=contigOrder) + theme_bw()
View(ali)
plot_coverage(ali)
plot_coverage(ali,target=FALSE)
View(ali)
